#include "boundary_conditions/reflect_functions.hpp"
#include "classes/class_Rxns.hpp"
#include "io/io.hpp"
#include "reactions/association/association.hpp"
#include "reactions/shared_reaction_functions.hpp"
#include "tracing.hpp"
#include <cmath>
#include <iomanip>

// ifaceIndex2, reactMol2, reactCom2 are implicit-lipid's
/*Either 1 or 2 is implicit lipid*/
void associate_implicitlipid_box(int ifaceIndex1, int ifaceIndex2, Molecule& reactMol1, Molecule& reactMol2, Complex& reactCom1,
    Complex& reactCom2, const Parameters& params, ForwardRxn& currRxn, std::vector<Molecule>& moleculeList,
    std::vector<MolTemplate>& molTemplateList, std::vector<int>& emptyMolList, std::vector<int>& emptyComList,
    std::map<std::string, int>& observablesList, copyCounters& counterArrays, std::vector<Complex>& complexList, Membrane& membraneObject, const std::vector<ForwardRxn>& forwardRxns, const std::vector<BackRxn>& backRxns)
{
    double RS3D { -1.0 };
    for (int RS3Di = 0; RS3Di < 100; RS3Di++) {
        if ((std::abs(membraneObject.RS3Dvect[RS3Di] - currRxn.bindRadius) < 1E-15) && (std::abs(membraneObject.RS3Dvect[RS3Di + 100] - currRxn.rateList[0].rate) < 1E-15) && std::abs(membraneObject.RS3Dvect[RS3Di + 200] - (1.0 / 3.0 * (molTemplateList[currRxn.reactantListNew[0].molTypeIndex].D.x + molTemplateList[currRxn.reactantListNew[1].molTypeIndex].D.x) + 1.0 / 3.0 * (molTemplateList[currRxn.reactantListNew[0].molTypeIndex].D.y + molTemplateList[currRxn.reactantListNew[1].molTypeIndex].D.y) + 1.0 / 3.0 * (molTemplateList[currRxn.reactantListNew[0].molTypeIndex].D.z + molTemplateList[currRxn.reactantListNew[1].molTypeIndex].D.z))) < 1E-15) {
            RS3D = membraneObject.RS3Dvect[RS3Di + 300];
            break;
        }
    }

    //	  if (reactCom1.OnSurface == true)
    //      return;
    if (reactMol2.isImplicitLipid == true) {
        // mol2 is implicit-lipid, then we need to set its temporary position according to mol1.
        //    reactMol2.mass = 1E300; //
        Coord displace = reactMol2.interfaceList[ifaceIndex2].coord - reactMol2.comCoord;
        double shift = 0.1; //do not put right underneath, so that sigma starts at non-zero.
        reactMol2.comCoord.x = reactMol1.comCoord.x + shift;
        reactMol2.comCoord.y = reactMol1.comCoord.y - shift;
        reactMol2.comCoord.z = -membraneObject.waterBox.z / 2.0 + RS3D;

        reactMol2.interfaceList[ifaceIndex2].coord = reactMol2.comCoord + displace;

        reactCom2.comCoord = reactMol2.comCoord;

    } else {
        // mol1 is implicit-lipid!
        //    reactMol1.mass = 1E300; //
        Coord displace = reactMol1.interfaceList[ifaceIndex1].coord - reactMol1.comCoord;
        double shift = 0.1; //do not put right underneath, so that sigma starts at non-zero.
        reactMol1.comCoord.x = reactMol2.comCoord.x + shift;
        reactMol1.comCoord.y = reactMol2.comCoord.y - shift;
        reactMol1.comCoord.z = -membraneObject.waterBox.z / 2.0 + RS3D;

        reactMol1.interfaceList[ifaceIndex1].coord = reactMol1.comCoord + displace;

        reactCom1.comCoord = reactMol1.comCoord;
    }
    // set up temporary coordinates
    for (auto& memMol : reactCom1.memberList)
        moleculeList[memMol].set_tmp_association_coords();

    for (auto& mol : reactCom2.memberList)
        moleculeList[mol].set_tmp_association_coords();
    std::cout << " In Associate binidng to surface " << std::endl;
    write_xyz_assoc_cout(reactCom1, reactCom2, moleculeList);

    // create references to reacting interfaces
    Coord& reactIface1 = reactMol1.tmpICoords[ifaceIndex1];
    Coord& reactIface2 = reactMol2.tmpICoords[ifaceIndex2];

    bool isOnMembrane = false;
    // orientation corrections for membrane bound components
    if (reactCom1.D.z < 1E-15 && reactCom2.D.z < 1E-15) {
        isOnMembrane = true;
        std::cout << " IMPLICIT LIPID 2D ! Value of isOnMembrane: " << isOnMembrane << std::endl;
    }
    bool transitionToSurface = false;
    if (isOnMembrane == false) {
        transitionToSurface = true;
    }
    Molecule memProtein;

    int slowPro = reactMol2.index;

    double tol = 1E-14;
    /*Calculate COM of the two complexes pre-association. The COM of the new complex after should be close to this
         * Here, we will force it back, as rotation can cause large displacements*/
    Coord startCOM; //=new double[3];

    com_of_two_tmp_complexes(reactCom1, reactCom2, startCOM, moleculeList); // com of c1+c2 (original coordinates).
    // std::cout <<"INITIAL COMPLEX PAIR COM: "<<startCOM.x<<' '<<startCOM.y<<' '<<startCOM.z<<std::endl;

    // MOVE PROTEIN TO THE MEMBRANE, and place IL at sigma.
    {
        Vector sigma { reactIface1 - reactIface2 };

        double DxSum { reactCom1.D.x + reactCom2.D.x };
        double DySum { reactCom1.D.y + reactCom2.D.y };
        double DzSum { reactCom1.D.z + reactCom2.D.z };

        double displaceFrac {};
        if (isOnMembrane == true) {
            if (reactCom1.D.x < reactCom2.D.x) {
                slowPro = reactMol1.index;
                memProtein = reactMol1; // rotate relative to the slower protein.
            } else
                memProtein = reactMol2;

            DzSum = 1.0; // to prevent divide by 0
            double sigmaMag = sqrt((sigma.x * sigma.x) + (sigma.y * sigma.y));
            std::cout << "DzSum is re-defined; " << DzSum << " magnitude of Sigma: " << sigmaMag << std::endl;

            if (sigmaMag < 1E-4) {
                // if entirety of sigma is in z-component, ignore x and y
                displaceFrac = 1;
            } else {
                double sigmaMag = sqrt((sigma.x * sigma.x) + (sigma.y * sigma.y));
                displaceFrac = (sigmaMag - currRxn.bindRadius) / sigmaMag;
            }
        } else {

            double sigmaMag = sqrt((sigma.x * sigma.x) + (sigma.y * sigma.y) + (sigma.z * sigma.z));
            // sigma.calc_magnitude();
            displaceFrac = (sigmaMag - currRxn.bindRadius) / sigmaMag;
            /*At least one protein is in 3D*/
            //if (reactCom1.D.z < tol || reactCom2.D.z < tol) {
            transitionToSurface = true; // both can't be less than tol, or would not be in this loop.
            std::cout << "TRANSITIONING FROM 3D->2D " << std::endl;
            //}
        }
        Vector transVec1 {};
        Vector transVec2 {};
        std::cout << " DisplaceFraction along sigma: " << displaceFrac << std::endl;
        std::cout << " sigma: " << sigma.x << ' ' << sigma.y << ' ' << sigma.z << " DzSUM: " << DzSum << std::endl;
        transVec1.x = -sigma.x * (reactCom1.D.x / DxSum) * displaceFrac;
        transVec1.y = -sigma.y * (reactCom1.D.y / DySum) * displaceFrac;
        transVec1.z = -sigma.z * (reactCom1.D.z / DzSum) * displaceFrac;

        transVec2.x = sigma.x * (reactCom2.D.x / DxSum) * displaceFrac;
        transVec2.y = sigma.y * (reactCom2.D.y / DySum) * displaceFrac;
        transVec2.z = sigma.z * (reactCom2.D.z / DzSum) * displaceFrac;
        std::cout << " translation1 to sigma: " << transVec1.x << ' ' << transVec1.y << ' ' << transVec1.z << std::endl;

        // update the temporary coordinates
        for (auto& mp : reactCom1.memberList)
            moleculeList[mp].update_association_coords(transVec1);
        for (auto& mp : reactCom2.memberList)
            moleculeList[mp].update_association_coords(transVec2);

        // std::cout<<" Coords at sigma coords "<<std::endl;
        //write_xyz_assoc_cout( reactCom1, reactCom2, moleculeList);
    }

    if (molTemplateList[reactMol1.molTypeIndex].isPoint && molTemplateList[reactMol2.molTypeIndex].isPoint) {
        // If both molecules are points, no orientations to specify
        std::cout << " Move two point particles to contact along current separation vector, NO ORIENTATION \n";
    } else { //both are not points.
        /* THETA */
        std::cout << std::setw(8) << std::setfill('-') << ' ' << std::endl
                  << "THETA 1" << std::endl
                  << std::setw(8) << ' ' << std::setfill(' ') << std::endl;
        theta_rotation(reactIface1, reactIface2, reactMol1, reactMol2, currRxn.assocAngles.theta1, reactCom1,
            reactCom2, moleculeList);

        //            write_xyz_assoc("theta1.xyz", reactCom1, reactCom2, moleculeList);
        //                write_xyz_assoc_cout( reactCom1, reactCom2, moleculeList);

        std::cout << std::setw(30) << std::setfill('-') << ' ' << std::setfill(' ') << std::endl;
        std::cout << "THETA 2" << std::endl
                  << std::setw(8) << std::setfill('-') << ' ' << std::setfill(' ') << std::endl;
        theta_rotation(reactIface2, reactIface1, reactMol2, reactMol1, currRxn.assocAngles.theta2, reactCom2,
            reactCom1, moleculeList);

        //            write_xyz_assoc("theta2.xyz", reactCom1, reactCom2, moleculeList);
        //             write_xyz_assoc_cout(reactCom1, reactCom2, moleculeList);

        /* OMEGA */
        // if protein has theta M_PI, uses protein norm instead of com_iface vector
        std::cout << std::setw(6) << std::setfill('-') << ' ' << std::endl
                  << "OMEGA" << std::endl
                  << std::setw(6) << ' ' << std::setfill(' ') << std::endl;
        if (!std::isnan(currRxn.assocAngles.omega)) {
            omega_rotation(reactIface1, reactIface2, ifaceIndex2, reactMol1, reactMol2, reactCom1, reactCom2,
                currRxn.assocAngles.omega, currRxn, moleculeList, molTemplateList);
        } else
            std::cout << "P1 or P2 is a rod-type protein, no dihedral for associated complex." << std::endl;

        //            write_xyz_assoc("omega.xyz", reactCom1, reactCom2, moleculeList);
        //                write_xyz_assoc_cout(reactCom1, reactCom2, moleculeList);

        /* PHI */
        // PHI 1
        std::cout << std::setw(6) << std::setfill('-') << ' ' << std::endl
                  << "PHI 1" << std::endl
                  << std::setw(6) << ' ' << std::setfill(' ') << std::endl;

        if (!std::isnan(currRxn.assocAngles.phi1)) {
            phi_rotation(reactIface1, reactIface2, ifaceIndex2, reactMol1, reactMol2, reactCom1, reactCom2,
                currRxn.norm1, currRxn.assocAngles.phi1, currRxn, moleculeList, molTemplateList);
            //                write_xyz_assoc("phi1.xyz", reactCom1, reactCom2, moleculeList);
            //		write_xyz_assoc_cout(reactCom1, reactCom2, moleculeList);
        } else
            std::cout << "P1 has no valid phi angle." << std::endl;

        // PHI 2
        std::cout << std::setw(6) << std::setfill('-') << ' ' << std::endl
                  << "PHI 2" << std::endl
                  << std::setw(6) << ' ' << std::setfill(' ') << std::endl;

        if (!std::isnan(currRxn.assocAngles.phi2)) {
            phi_rotation(reactIface2, reactIface1, ifaceIndex1, reactMol2, reactMol1, reactCom2, reactCom1,
                currRxn.norm2, currRxn.assocAngles.phi2, currRxn, moleculeList, molTemplateList);
            //                write_xyz_assoc("phi2.xyz", reactCom1, reactCom2, moleculeList);
            //                 write_xyz_assoc_cout(reactCom1, reactCom2, moleculeList);
        } else
            std::cout << "P2 has no valid phi angle." << std::endl;

        /*FINISHED ROTATING, NO CONSTRAINTS APPLIED TO SURFACE REACTIONS*/
        Coord finalCOM; //=new double[3];
        com_of_two_tmp_complexes(reactCom1, reactCom2, finalCOM, moleculeList); // com of c1+c2 (final (tmp) coordinates).
        // std::cout <<"Pre-MEMBRANE ROT: COMPLEX PAIR COM: "<<finalCOM.x<<' '<<finalCOM.y<<' '<<finalCOM.z<<std::endl;

        if (isOnMembrane == true) {

            /*return orientation of normal back to starting position*/
            std::cout << " IMPLICIT LIPID 2D IS ON MEMBRANE, CORRECT ORIENTATION ! " << std::endl;
            Quat memRot;
            Coord pivot;

            if (slowPro == reactMol1.index) {
                // reactMol1.display_assoc_icoords("CURRORIENTATION_TOROTATE1");
                memRot = save_mem_orientation(memProtein, reactMol1, molTemplateList[reactMol1.molTypeIndex]);
                pivot = reactMol1.tmpComCoord;

            } else {
                // reactMol2.display_assoc_icoords("CURRORIENTATION_TOROTATE2");
                memRot = save_mem_orientation(memProtein, reactMol2, molTemplateList[reactMol2.molTypeIndex]);
                pivot = reactMol2.tmpComCoord;
            }

            /*double *pivot=new double[3];
               pivot[0]=bases[slowPro].xcom;
               pivot[1]=bases[slowPro].ycom;
               pivot[2]=bases[slowPro].zcom;*/
            /*rotate the molecules and their complexes.*/
            // rotate_int_quat(pivot, ind_com[c1], bases, memRot);
            // rotate_int_quat(pivot, ind_com[c2], bases, memRot);
            rotate(pivot, memRot, reactCom1, moleculeList);
            rotate(pivot, memRot, reactCom2, moleculeList);
            //  std::cout <<" AFTER ROTATION1: "<<std::endl;
            // reactMol1.display_assoc_icoords("molecule 1");
            // reactMol2.display_assoc_icoords("molecule 2");

            //	    std::cout <<"CRDS after forcing back to membrane bound orientation: \n";*/
        }
        // Coord finalCOM;//=new double[3];
        com_of_two_tmp_complexes(reactCom1, reactCom2, finalCOM, moleculeList); // com of c1+c2 (final (tmp) coordinates).
        // std::cout <<"FINAL COMPLEX PAIR COM: "<<finalCOM.x<<' '<<finalCOM.y<<' '<<finalCOM.z<<std::endl;
        /*Force finalCOM to startCOM, unless transitioning from 3D->2D*/
        Vector dtrans {};
        dtrans.x = startCOM.x - finalCOM.x;
        dtrans.y = startCOM.y - finalCOM.y;
        dtrans.z = startCOM.z - finalCOM.z;

        if (transitionToSurface == true)
            dtrans.z = 0.0; // don't move in z, now they are both on membrane
        // std::cout <<"TRANSLATE COMPLEX PAIR TO ORIG COM BY SHIFTING: "<<dtrans.x<<' '<<dtrans.y<<'
        // '<<dtrans.z<<std::endl;                  // update the temporary coordinates for both complexes
        for (auto& mp : reactCom1.memberList)
            moleculeList[mp].update_association_coords(dtrans);
        for (auto& mp : reactCom2.memberList)
            moleculeList[mp].update_association_coords(dtrans);

        double zchg = 0;
        if (isOnMembrane == 1) {
            /*RECHECK HERE IF ANY OF THE LIPIDS ARE SLIGHTLY BELOW THE MEMBRANE. THIS CAN HAPPEN DUE TO PRECISION ISSUES
               always use tmpCoords in this associate routine.
              */
            dtrans.x = 0;
            dtrans.y = 0;
            for (auto& mp : reactCom1.memberList) {
                if (moleculeList[mp].isLipid == true) { // this is a lipid
                    if (moleculeList[mp].tmpComCoord.z < -membraneObject.waterBox.z / 2.0) {
                        double ztmp = (-membraneObject.waterBox.z / 2.0)
                            - moleculeList[mp].tmpComCoord.z; // lipid COM is below box bottom
                        if (ztmp > zchg)
                            zchg = ztmp; // largest dip below membrane
                    }
                }
            }
            for (auto& mp : reactCom2.memberList) {
                if (moleculeList[mp].isLipid == true) { // this is a lipid
                    if (moleculeList[mp].tmpComCoord.z < -membraneObject.waterBox.z / 2.0) {
                        double ztmp = (-membraneObject.waterBox.z / 2.0)
                            - moleculeList[mp].tmpComCoord.z; // lipid COM is below box bottom
                        if (ztmp > zchg)
                            zchg = ztmp; // largest dip below membrane
                    }
                }
            }
            dtrans.z = zchg;

            // update the temporary coordinates for both complexes
            for (auto& mp : reactCom1.memberList)
                moleculeList[mp].update_association_coords(dtrans);
            for (auto& mp : reactCom2.memberList)
                moleculeList[mp].update_association_coords(dtrans);
        }
    } //only correct orientations if both particles are not points.

    std::cout << " FINAL COORDS PRIOR TO OVERLAP CHECK " << std::endl;
    // write_xyz_assoc_cout(reactCom1, reactCom2, moleculeList);

    //Reflect off the box.
    std::array<double, 3> traj; //=new double[3];
    for (int mm = 0; mm < 3; mm++)
        traj[mm] = 0;

    /*This needs to evaluate the traj update, based on it initially being zero.
          And here, it should be called based on the tmpCoords, not the full coordinates.
          also requires updating the COM of this temporary new position
        */
    update_complex_tmp_com_crds(reactCom1, moleculeList);
    reflect_traj_tmp_crds(params, moleculeList, reactCom1, traj, membraneObject, RS3D); // uses tmpCoords to calculate traj.
    if (traj[0] + traj[1] + traj[2] != 0) {
        // update the temporary coordinates for both complexes
        Vector vtraj { traj[0], traj[1], traj[2] };
        for (auto& mp : reactCom1.memberList)
            moleculeList[mp].update_association_coords(vtraj);
        for (auto& mp : reactCom2.memberList)
            moleculeList[mp].update_association_coords(vtraj);

        std::cout << "CRDS after reflecting off of the BOX by " << traj[0] << ' ' << traj[1] << ' ' << traj[2]
                  << std::endl;
        write_xyz_assoc_cout(reactCom1, reactCom2, moleculeList);
    }
    /* CHECKS */
    bool cancelAssoc { false };
    //check_for_structure_overlap(cancelAssoc, reactCom1, reactCom2, moleculeList, params, molTemplateList);
    check_if_spans_box(cancelAssoc, params, reactCom1, reactCom2, moleculeList, membraneObject);
    if (cancelAssoc == false)
        check_for_structure_overlap_system(cancelAssoc, reactCom1, reactCom2, moleculeList, params, molTemplateList, complexList, forwardRxns, backRxns);

    if (cancelAssoc) {
        std::cout << "Canceling association, returning complexes to original state.\n";
        for (auto memMol : reactCom1.memberList)
            moleculeList[memMol].clear_tmp_association_coords();
        for (auto memMol : reactCom2.memberList)
            moleculeList[memMol].clear_tmp_association_coords();
        return;
        //EXIT FROM THIS ROUTINE.
    }

    if (reactMol2.isImplicitLipid == true) {
        // write temporary to real coords and clear temporary coordinates
        for (auto memMol : reactCom1.memberList) {
            moleculeList[memMol].comCoord = moleculeList[memMol].tmpComCoord;
            for (unsigned int i { 0 }; i < moleculeList[memMol].interfaceList.size(); ++i)
                moleculeList[memMol].interfaceList[i].coord = moleculeList[memMol].tmpICoords[i];
            moleculeList[memMol].clear_tmp_association_coords();
            moleculeList[memMol].trajStatus = TrajStatus::propagated;
        }
        //add link to surface for the molecule
        moleculeList[reactMol1.index].linksToSurface++;
        // update complexes
        reactCom1.iLipidIndex = reactMol2.index; //index in molecule list of the implicit lipid.
        reactCom1.linksToSurface++;
        reactCom1.update_properties(moleculeList, molTemplateList); // recalculate the properties of the first complex
        reactCom1.OnSurface = true; // the complex is on membrane now.
        reactCom1.D.z = 0;
        /*Clear implicit lipid properties*/
        moleculeList[reactMol2.index].clear_tmp_association_coords();
        reactCom2.memberList.clear();
        reactCom2.memberList.push_back(reactMol2.index);
        std::cout << " Size of IL's complex:" << reactCom2.memberList.size() << " Interfaces on IL: " << moleculeList[reactMol2.index].interfaceList.size() << std::endl;
        reactCom2.update_properties(moleculeList, molTemplateList); // recalculate the properties of the second complex
        //Enforce boundary conditions
        reflect_complex_rad_rot(membraneObject, reactCom1, moleculeList, RS3D);

        // update Molecule interface statuses
        reactMol1.interfaceList[ifaceIndex1].interaction.partnerIndex = reactMol2.index;
        reactMol1.interfaceList[ifaceIndex1].interaction.partnerIfaceIndex = ifaceIndex2;
        if (currRxn.isReversible) {
            reactMol1.interfaceList[ifaceIndex1].interaction.conjBackRxn = currRxn.conjBackRxnIndex;
        }
        reactMol1.interfaceList[ifaceIndex1].isBound = true;
        //**************************************************
        //**************************************************donnot understand why to change interfaceList.index ???
        reactMol1.interfaceList[ifaceIndex1].index = currRxn.productListNew[0].absIfaceIndex;

        // add to the list of bound interfaces and remove from the list of free interfaces
        reactMol1.bndlist.push_back(ifaceIndex1);
        reactMol1.bndpartner.push_back(reactMol2.index);
        {
            size_t tmpItr { 0 };
            for (unsigned i { 0 }; i < reactMol1.freelist.size(); ++i) {
                if (reactMol1.freelist[i] == ifaceIndex1)
                    tmpItr = i;
            }
            reactMol1.freelist[tmpItr] = reactMol1.freelist.back();
            reactMol1.freelist.pop_back();
        }

        // Set probability of this protein to zero in all reactions so it doesn't try to
        // react again but the partners still will avoid overlapping.
        for (unsigned crossItr { 0 }; crossItr < reactMol1.crossbase.size(); ++crossItr) {
            int skipMol { reactMol1.crossbase[crossItr] };
            if (!moleculeList[skipMol].isImplicitLipid) {
                for (unsigned crossItr2 { 0 }; crossItr2 < moleculeList[skipMol].crossbase.size(); ++crossItr2) {
                    if (moleculeList[skipMol].crossbase[crossItr2] == reactMol1.index)
                        moleculeList[skipMol].probvec[crossItr2] = 0;
                }
            }
        }

        // Update the crossed molecule lists so that the current molecules won't avoid anything, but others will.
        reactCom1.ncross = -1;
        reactMol1.crossbase.clear();
        //mol2 is the implicit lipid.
    } else {
        //Mol1 is implicit lipid.
        // write temporary to real coords and clear temporary coordinates
        for (auto memMol : reactCom2.memberList) {
            moleculeList[memMol].comCoord = moleculeList[memMol].tmpComCoord;
            for (unsigned int i { 0 }; i < moleculeList[memMol].interfaceList.size(); ++i)
                moleculeList[memMol].interfaceList[i].coord = moleculeList[memMol].tmpICoords[i];
            moleculeList[memMol].clear_tmp_association_coords();
            moleculeList[memMol].trajStatus = TrajStatus::propagated;
        }
        //add link to surface for the molecule
        moleculeList[reactMol2.index].linksToSurface++;
        // update complexes
        reactCom2.iLipidIndex = reactMol1.index; //index in molecule list of the implicit lipid.
        reactCom2.linksToSurface++;
        reactCom2.update_properties(moleculeList, molTemplateList); // recalculate the properties of the first complex
        reactCom2.OnSurface = true; // the complex is on membrane now.
        reactCom2.D.z = 0;
        /*Clear implicit lipid properties*/
        moleculeList[reactMol1.index].clear_tmp_association_coords();
        reactCom1.memberList.clear();
        reactCom1.memberList.push_back(reactMol1.index);
        std::cout << " Size of IL's complex:" << reactCom1.memberList.size() << " Interfaces on IL: " << moleculeList[reactMol1.index].interfaceList.size() << std::endl;
        reactCom1.update_properties(moleculeList, molTemplateList); // recalculate the properties of the second complex

        //Enforce boundary conditions
        reflect_complex_rad_rot(membraneObject, reactCom2, moleculeList, RS3D);

        // update Molecule interface statuses
        reactMol2.interfaceList[ifaceIndex2].interaction.partnerIndex = reactMol1.index;
        reactMol2.interfaceList[ifaceIndex2].interaction.partnerIfaceIndex = ifaceIndex1;
        if (currRxn.isReversible) {
            reactMol2.interfaceList[ifaceIndex2].interaction.conjBackRxn = currRxn.conjBackRxnIndex;
        }
        reactMol2.interfaceList[ifaceIndex2].isBound = true;
        //**************************************************
        //**************************************************donnot understand why to change interfaceList.index ???
        reactMol2.interfaceList[ifaceIndex2].index = currRxn.productListNew[0].absIfaceIndex;

        // add to the list of bound interfaces and remove from the list of free interfaces
        reactMol2.bndlist.push_back(ifaceIndex2);
        reactMol2.bndpartner.push_back(reactMol1.index);
        {
            size_t tmpItr { 0 };
            for (unsigned i { 0 }; i < reactMol2.freelist.size(); ++i) {
                if (reactMol2.freelist[i] == ifaceIndex2)
                    tmpItr = i;
            }
            reactMol2.freelist[tmpItr] = reactMol2.freelist.back();
            reactMol2.freelist.pop_back();
        }

        // Set probability of this protein to zero in all reactions so it doesn't try to
        // react again but the partners still will avoid overlapping.
        for (unsigned crossItr { 0 }; crossItr < reactMol2.crossbase.size(); ++crossItr) {
            int skipMol { reactMol2.crossbase[crossItr] };
            if (!moleculeList[skipMol].isImplicitLipid) {
                for (unsigned crossItr2 { 0 }; crossItr2 < moleculeList[skipMol].crossbase.size(); ++crossItr2) {
                    if (moleculeList[skipMol].crossbase[crossItr2] == reactMol2.index)
                        moleculeList[skipMol].probvec[crossItr2] = 0;
                }
            }
        }

        // Update the crossed molecule lists so that the current molecules won't avoid anything, but others will.
        reactCom2.ncross = -1;
        reactMol2.crossbase.clear();
    } //reactmol1 is implicit lipid

    //update the number of bound species
    update_Nboundpairs(reactMol1.molTypeIndex, reactMol2.molTypeIndex, 1, params, counterArrays);

    //Update species copy numbers
    counterArrays.copyNumSpecies[currRxn.reactantListNew[0].absIfaceIndex] -= 1; // decrement ifaceIndex1
    counterArrays.copyNumSpecies[currRxn.reactantListNew[1].absIfaceIndex] -= 1; // decrement ifaceIndex2
    //counterArrays.copyNumSpecies[reactMol1.interfaceList[ifaceIndex1].index] -= 1; // decrement ifaceIndex1
    //counterArrays.copyNumSpecies[reactMol2.interfaceList[ifaceIndex2].index] -= 1; // decrement ifaceIndex2
    counterArrays.copyNumSpecies[currRxn.productListNew[0].absIfaceIndex] += 1; // increment product state

    //Update free number of lipids of IL for each state
    RxnIface implicitLipidState {};
    const auto& implicitLipidStateList = molTemplateList[moleculeList[membraneObject.implicitlipidIndex].molTypeIndex].interfaceList[0].stateList;
    if (molTemplateList[currRxn.reactantListNew[1].molTypeIndex].isImplicitLipid == true) {
        implicitLipidState = currRxn.reactantListNew[1];
    } else {
        implicitLipidState = currRxn.reactantListNew[0];
    }
    int relStateIndex { -1 };
    for (auto& state : implicitLipidStateList) {
        if (state.index == implicitLipidState.absIfaceIndex) {
            relStateIndex = static_cast<int>(&state - &implicitLipidStateList[0]);
            break;
        }
    }
    membraneObject.numberOfFreeLipidsEachState[relStateIndex] -= 1;

    // TODO: Insert species tracking here
    if (currRxn.isObserved) {
        auto obsItr = observablesList.find(currRxn.observeLabel);
        if (obsItr != observablesList.end())
            ++obsItr->second;
    }
}
