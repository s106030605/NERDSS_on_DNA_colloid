#include "boundary_conditions/reflect_functions.hpp"
#include "classes/class_Rxns.hpp"
#include "io/io.hpp"
#include "reactions/association/association.hpp"
#include "reactions/association/functions_for_spherical_system.hpp"
#include "reactions/shared_reaction_functions.hpp"
#include "tracing.hpp"
#include <cmath>
#include <iomanip>

void associate_box(int ifaceIndex1, int ifaceIndex2, Molecule& reactMol1, Molecule& reactMol2, Complex& reactCom1,
    Complex& reactCom2, const Parameters& params, ForwardRxn& currRxn, std::vector<Molecule>& moleculeList,
    std::vector<MolTemplate>& molTemplateList, std::vector<int>& emptyMolList, std::vector<int>& emptyComList,
    std::map<std::string, int>& observablesList, copyCounters& counterArrays, std::vector<Complex>& complexList, Membrane& membraneObject, const std::vector<ForwardRxn>& forwardRxns, const std::vector<BackRxn>& backRxns)
{
    if (reactCom1.index == reactCom2.index) {
        // skip to protein interation updates
        std::cout << "Closing a loop, no rotations performed.\n";
        counterArrays.nLoops++;
        // update the Molecule's TrajStatus (this is done in the else, when Molecules are rotated but not otherwise)
        for (auto& memMol : reactCom1.memberList)
            moleculeList[memMol].trajStatus = TrajStatus::associated;
    } else { //not in the same complex
        // set up temporary coordinates
        for (auto& memMol : reactCom1.memberList)
            moleculeList[memMol].set_tmp_association_coords();

        for (auto& mol : reactCom2.memberList)
            moleculeList[mol].set_tmp_association_coords();

        // create references to reacting interfaces
        Coord& reactIface1 = reactMol1.tmpICoords[ifaceIndex1];
        Coord& reactIface2 = reactMol2.tmpICoords[ifaceIndex2];

        // orientation corrections for membrane bound components
        bool isOnMembrane = false;
        bool transitionToSurface = false;
        Molecule memProtein;

        int slowPro = reactMol2.index;

        double tol = 1E-14;
        /*Calculate COM of the two complexes pre-association. The COM of the new complex after should be close to this
     * Here, we will force it back, as rotation can cause large displacements*/
        Coord startCOM; //=new double[3];

        com_of_two_tmp_complexes(reactCom1, reactCom2, startCOM, moleculeList); // com of c1+c2 (original coordinates).
        // std::cout <<"INITIAL COMPLEX PAIR COM: "<<startCOM.x<<' '<<startCOM.y<<' '<<startCOM.z<<std::endl;

        /* MOVE PROTEIN TO SIGMA */
        {
            double DxSum { reactCom1.D.x + reactCom2.D.x };
            double DySum { reactCom1.D.y + reactCom2.D.y };
            double DzSum { reactCom1.D.z + reactCom2.D.z };

            Vector sigma { reactIface1 - reactIface2 };
            //   std::cout<<" sigma: "<<sigma.x<<' '<<sigma.y<<' '<<sigma.z<<std::endl;
            // std::cout <<" Dsum and components: "<<DxSum<<' '<<DySum<<' '<<DzSum<<std::endl;
            Vector transVec1 {};
            Vector transVec2 {};
            double displaceFrac {};

            // if both in 2D, ignore the z-component
            if (DzSum < 1E-14) {
                isOnMembrane = true;
                /*Store coordinates of one protein to recover membrane-bound orientation*/

                if (reactCom1.D.x < reactCom2.D.x) {
                    slowPro = reactMol1.index;
                    memProtein = reactMol1; // rotate relative to the slower protein.
                } else
                    memProtein = reactMol2;

                //	memProtein.display_assoc_icoords("MEMORIENTATION_STORED");
                DzSum = 1; // to prevent divide by 0
                if (std::abs(std::abs(sigma.z) - currRxn.bindRadius) < 1E-3) {
                    // if entirety of sigma is in z-component, ignore x and y
                    displaceFrac = 1;
                } else {
                    double sigmaMag = sqrt((sigma.x * sigma.x) + (sigma.y * sigma.y));
                    displaceFrac = (sigmaMag - currRxn.bindRadius) / sigmaMag;
                }
            } else { //note
                double sigmaMag = sqrt((sigma.x * sigma.x) + (sigma.y * sigma.y) + (sigma.z * sigma.z));
                // sigma.calc_magnitude();
                displaceFrac = (sigmaMag - currRxn.bindRadius) / sigmaMag;
                /*At least one protein is in 3D*/
                if (reactCom1.D.z < tol || reactCom2.D.z < tol) {
                    transitionToSurface = true; // both can't be less than tol, or would not be in this loop.
                    std::cout << "TRANSITIONING FROM 3D->2D " << std::endl;
                }
            }

            transVec1.x = -sigma.x * (reactCom1.D.x / DxSum) * displaceFrac;
            transVec1.y = -sigma.y * (reactCom1.D.y / DySum) * displaceFrac;
            transVec1.z = -sigma.z * (reactCom1.D.z / DzSum) * displaceFrac;

            transVec2.x = sigma.x * (reactCom2.D.x / DxSum) * displaceFrac;
            transVec2.y = sigma.y * (reactCom2.D.y / DySum) * displaceFrac;
            transVec2.z = sigma.z * (reactCom2.D.z / DzSum) * displaceFrac;
            //   std::cout<<" translation1 to sigma: "<<transVec1.x<<' '<<transVec1.y<<' '<<transVec1.z<<std::endl;

            // update the temporary coordinates
            for (auto& mp : reactCom1.memberList)
                moleculeList[mp].update_association_coords(transVec1);
            for (auto& mp : reactCom2.memberList)
                moleculeList[mp].update_association_coords(transVec2);
            std::cout << "Position after pushed to sigma: " << std::endl;
            reactMol1.display_assoc_icoords("mol1");
            reactMol2.display_assoc_icoords("mol2");

            //write_xyz_assoc_cout( reactCom1, reactCom2, moleculeList);
        } //matches move protein to sigma

        if (molTemplateList[reactMol1.molTypeIndex].isPoint && molTemplateList[reactMol2.molTypeIndex].isPoint) {
            /*If both molecules are points, no orientations to specify*/
            std::cout << " Move two point particles to contact along current separation vector, NO ORIENTATION \n";
        } else { //both are not points
            /* THETA */
            std::cout << std::setw(8) << std::setfill('-') << ' ' << std::endl
                      << "THETA 1" << std::endl
                      << std::setw(8) << ' ' << std::setfill(' ') << std::endl;
            theta_rotation(reactIface1, reactIface2, reactMol1, reactMol2, currRxn.assocAngles.theta1, reactCom1,
                reactCom2, moleculeList);

            //write_xyz_assoc("theta1.xyz", reactCom1, reactCom2, moleculeList);
            //          write_xyz_assoc_cout( reactCom1, reactCom2, moleculeList);

            std::cout << std::setw(30) << std::setfill('-') << ' ' << std::setfill(' ') << std::endl;
            std::cout << "THETA 2" << std::endl
                      << std::setw(8) << std::setfill('-') << ' ' << std::setfill(' ') << std::endl;
            theta_rotation(reactIface2, reactIface1, reactMol2, reactMol1, currRxn.assocAngles.theta2, reactCom2,
                reactCom1, moleculeList);

            // write_xyz_assoc("theta2.xyz", reactCom1, reactCom2, moleculeList);
            //       write_xyz_assoc_cout(reactCom1, reactCom2, moleculeList);

            /* OMEGA */
            // if protein has theta M_PI, uses protein norm instead of com_iface vector
            std::cout << std::setw(6) << std::setfill('-') << ' ' << std::endl
                      << "OMEGA" << std::endl
                      << std::setw(6) << ' ' << std::setfill(' ') << std::endl;
            if (!std::isnan(currRxn.assocAngles.omega)) {
                omega_rotation(reactIface1, reactIface2, ifaceIndex2, reactMol1, reactMol2, reactCom1, reactCom2,
                    currRxn.assocAngles.omega, currRxn, moleculeList, molTemplateList);
            } else
                std::cout << "P1 or P2 is a rod-type protein, no dihedral for associated complex." << std::endl;

            // write_xyz_assoc("omega.xyz", reactCom1, reactCom2, moleculeList);
            //          write_xyz_assoc_cout(reactCom1, reactCom2, moleculeList);

            /* PHI */
            // PHI 1
            std::cout << std::setw(6) << std::setfill('-') << ' ' << std::endl
                      << "PHI 1" << std::endl
                      << std::setw(6) << ' ' << std::setfill(' ') << std::endl;

            if (!std::isnan(currRxn.assocAngles.phi1)) {
                phi_rotation(reactIface1, reactIface2, ifaceIndex2, reactMol1, reactMol2, reactCom1, reactCom2,
                    currRxn.norm1, currRxn.assocAngles.phi1, currRxn, moleculeList, molTemplateList);
                //write_xyz_assoc("phi1.xyz", reactCom1, reactCom2, moleculeList);
                //	write_xyz_assoc_cout(reactCom1, reactCom2, moleculeList);
            } else
                std::cout << "P1 has no valid phi angle." << std::endl;

            // PHI 2
            std::cout << std::setw(6) << std::setfill('-') << ' ' << std::endl
                      << "PHI 2" << std::endl
                      << std::setw(6) << ' ' << std::setfill(' ') << std::endl;

            if (!std::isnan(currRxn.assocAngles.phi2)) {
                phi_rotation(reactIface2, reactIface1, ifaceIndex1, reactMol2, reactMol1, reactCom2, reactCom1,
                    currRxn.norm2, currRxn.assocAngles.phi2, currRxn, moleculeList, molTemplateList);
                //write_xyz_assoc("phi2.xyz", reactCom1, reactCom2, moleculeList);
                //	 write_xyz_assoc_cout(reactCom1, reactCom2, moleculeList);
            } else
                std::cout << "P2 has no valid phi angle." << std::endl;
        } //end of if points.

        /*FINISHED ROTATING, NO CONSTRAINTS APPLIED TO SURFACE REACTIONS*/
        Coord finalCOM; //=new double[3];
        com_of_two_tmp_complexes(reactCom1, reactCom2, finalCOM, moleculeList); // com of c1+c2 (final (tmp) coordinates).
        std::cout << "Pre-MEMBRANE ROT: COMPLEX PAIR COM: " << finalCOM.x << ' ' << finalCOM.y << ' ' << finalCOM.z << std::endl;
        reactMol1.display_assoc_icoords("mol1");
        reactMol2.display_assoc_icoords("mol2");

        if (isOnMembrane == true) {

            /*return orientation of normal back to starting position*/
            std::cout << " IS ON MEMBRANE, CORRECT ORIENTATION ! " << std::endl;
            Quat memRot;
            Coord pivot;

            if (slowPro == reactMol1.index) {
                // reactMol1.display_assoc_icoords("CURRORIENTATION_TOROTATE1");
                memRot = save_mem_orientation(memProtein, reactMol1, molTemplateList[reactMol1.molTypeIndex]);
                pivot = reactMol1.tmpComCoord;

            } else {
                // reactMol2.display_assoc_icoords("CURRORIENTATION_TOROTATE2");
                memRot = save_mem_orientation(memProtein, reactMol2, molTemplateList[reactMol2.molTypeIndex]);
                pivot = reactMol2.tmpComCoord;
            }

            /*double *pivot=new double[3];
	pivot[0]=bases[slowPro].xcom;
	pivot[1]=bases[slowPro].ycom;
	pivot[2]=bases[slowPro].zcom;*/
            /*rotate the molecules and their complexes.*/
            // rotate_int_quat(pivot, ind_com[c1], bases, memRot);
            // rotate_int_quat(pivot, ind_com[c2], bases, memRot);
            rotate(pivot, memRot, reactCom1, moleculeList);
            rotate(pivot, memRot, reactCom2, moleculeList);
            //  std::cout <<" AFTER ROTATION1: "<<std::endl;
            // reactMol1.display_assoc_icoords("molecule 1");
            // reactMol2.display_assoc_icoords("molecule 2");

            //	    std::cout <<"CRDS after forcing back to membrane bound orientation: \n";*/
        }
        // Coord finalCOM;//=new double[3];
        com_of_two_tmp_complexes(reactCom1, reactCom2, finalCOM, moleculeList); // com of c1+c2 (final (tmp) coordinates).
        // std::cout <<"FINAL COMPLEX PAIR COM: "<<finalCOM.x<<' '<<finalCOM.y<<' '<<finalCOM.z<<std::endl;
        /*Force finalCOM to startCOM, unless transitioning from 3D->2D*/
        Vector dtrans {};
        dtrans.x = startCOM.x - finalCOM.x;
        dtrans.y = startCOM.y - finalCOM.y;
        dtrans.z = startCOM.z - finalCOM.z;

        if (transitionToSurface == true)
            dtrans.z = 0.0; // don't move in z, now they are both on membrane
        std::cout << "TRANSLATE COMPLEX PAIR TO ORIG COM BY SHIFTING: " << dtrans.x << ' ' << dtrans.y << ' ' << dtrans.z << std::endl; // update the temporary coordinates for both complexes
        for (auto& mp : reactCom1.memberList)
            moleculeList[mp].update_association_coords(dtrans);
        for (auto& mp : reactCom2.memberList)
            moleculeList[mp].update_association_coords(dtrans);

        double zchg = 0;
        if (isOnMembrane == 1) {
            /*RECHECK HERE IF ANY OF THE LIPIDS ARE SLIGHTLY BELOW THE MEMBRANE. THIS CAN HAPPEN DUE TO PRECISION ISSUES
	always use tmpCoords in this associate routine.
      */
            dtrans.x = 0;
            dtrans.y = 0;
            for (auto& mp : reactCom1.memberList) {
                if (moleculeList[mp].isLipid == true) { // this is a lipid
                    if (moleculeList[mp].tmpComCoord.z < -membraneObject.waterBox.z / 2.0) {
                        double ztmp = (-membraneObject.waterBox.z / 2.0)
                            - moleculeList[mp].tmpComCoord.z; // lipid COM is below box bottom
                        if (ztmp > zchg)
                            zchg = ztmp; // largest dip below membrane
                    }
                    if (moleculeList[mp].tmpComCoord.z - 0.01 > -membraneObject.waterBox.z / 2.0) {

                        double ztmp = (-membraneObject.waterBox.z / 2.0)
                            - moleculeList[mp].tmpComCoord.z; // lipid COM is ABOVE box bottom

                        std::cout << "WARNING, during associate, LIPID IS ABOVE MEMBRANE BY " << -ztmp << '\n';
                    }
                } //this is a lipid
            }
            for (auto& mp : reactCom2.memberList) {
                if (moleculeList[mp].isLipid == true) { // this is a lipid
                    if (moleculeList[mp].tmpComCoord.z < -membraneObject.waterBox.z / 2.0) {
                        double ztmp = (-membraneObject.waterBox.z / 2.0)
                            - moleculeList[mp].tmpComCoord.z; // lipid COM is below box bottom
                        if (ztmp > zchg)
                            zchg = ztmp; // largest dip below membrane
                    }
                    if (moleculeList[mp].tmpComCoord.z - 0.01 > -membraneObject.waterBox.z / 2.0) {

                        double ztmp = (-membraneObject.waterBox.z / 2.0)
                            - moleculeList[mp].tmpComCoord.z; // lipid COM is ABOVE box bottom

                        std::cout << "WARNING, during associate, LIPID IS ABOVE MEMBRANE BY " << -ztmp << '\n';
                    }
                } //this is a lipid
            }
            dtrans.z = zchg;
            std::cout << " Lipid is below membrane, shift up by: " << zchg << std::endl;
            // update the temporary coordinates for both complexes
            for (auto& mp : reactCom1.memberList)
                moleculeList[mp].update_association_coords(dtrans);
            for (auto& mp : reactCom2.memberList)
                moleculeList[mp].update_association_coords(dtrans);
        } //is on membrane

        std::cout << " FINAL COORDS PRIOR TO OVERLAP CHECK  AND REFLECT OFF BOX: " << std::endl;
        reactMol1.display_assoc_icoords("mol1");
        reactMol2.display_assoc_icoords("mol2");

        // write_xyz_assoc("final.xyz", reactCom1, reactCom2, moleculeList);
        //    write_xyz_assoc_cout(reactCom1, reactCom2, moleculeList);

        /*Reflect off the box.*/
        // Vector traj {};
        std::array<double, 3> traj; //=new double[3];
        for (int mm = 0; mm < 3; mm++)
            traj[mm] = 0;

        /*This needs to evaluate the traj update, based on it initially being zero.
      And here, it should be called based on the tmpCoords, not the full coordinates.
      also requires updating the COM of this temporary new position
    */
        update_complex_tmp_com_crds(reactCom1, moleculeList);
        update_complex_tmp_com_crds(reactCom2, moleculeList);

        reflect_traj_tmp_crds(params, moleculeList, reactCom1, traj, membraneObject, 0.0); // uses tmpCoords to calculate traj.
        reflect_traj_tmp_crds(params, moleculeList, reactCom2, traj, membraneObject, 0.0);

        if (std::abs(traj[0] + traj[1] + traj[2] - 0) > 1E-10) {
            // update the temporary coordinates for both complexes
            Vector vtraj { traj[0], traj[1], traj[2] };
            for (auto& mp : reactCom1.memberList)
                moleculeList[mp].update_association_coords(vtraj);
            for (auto& mp : reactCom2.memberList)
                moleculeList[mp].update_association_coords(vtraj);

            std::cout << "CRDS after reflecting off of the BOX by " << traj[0] << ' ' << traj[1] << ' ' << traj[2]
                      << std::endl;
            reactMol1.display_assoc_icoords("mol1");
            reactMol2.display_assoc_icoords("mol2");
            //write_xyz_assoc_cout(reactCom1, reactCom2, moleculeList);
        }

        /* CHECKS AFTER ASSOCIATION FOR STERIC COLLISIONS, FOR EXPANDING BEYOND THE BOX SIZE
       OR FOR MOVING PROTEINS A LARGE DISTANCE DUE TO SNAPPING INTO PLACE
    */
        bool cancelAssoc { false };
        check_for_structure_overlap(cancelAssoc, reactCom1, reactCom2, moleculeList, params, molTemplateList);
        if (cancelAssoc == false)
            check_if_spans_box(cancelAssoc, params, reactCom1, reactCom2, moleculeList, membraneObject);
        if (cancelAssoc == false)
            check_for_structure_overlap_system(cancelAssoc, reactCom1, reactCom2, moleculeList, params, molTemplateList, complexList, forwardRxns, backRxns);
        if (cancelAssoc == false)
            measure_complex_displacement(cancelAssoc, reactCom1, reactCom2, moleculeList, params, molTemplateList, complexList);

        if (cancelAssoc) {
            std::cout << "Canceling association, returning complexes to original state.\n";
            for (auto memMol : reactCom1.memberList)
                moleculeList[memMol].clear_tmp_association_coords();
            for (auto memMol : reactCom2.memberList)
                moleculeList[memMol].clear_tmp_association_coords();
            //end routine here!
            return;
        }

        //else if cancelAssoc==false, write temporary to real coords and clear temporary coordinates
        for (auto memMol : reactCom1.memberList) {
            moleculeList[memMol].comCoord = moleculeList[memMol].tmpComCoord;
            for (unsigned int i { 0 }; i < moleculeList[memMol].interfaceList.size(); ++i)
                moleculeList[memMol].interfaceList[i].coord = moleculeList[memMol].tmpICoords[i];
            moleculeList[memMol].clear_tmp_association_coords();
            moleculeList[memMol].trajStatus = TrajStatus::propagated;
        }

        for (auto memMol : reactCom2.memberList) {
            moleculeList[memMol].comCoord = moleculeList[memMol].tmpComCoord;
            for (unsigned int i { 0 }; i < moleculeList[memMol].interfaceList.size(); ++i)
                moleculeList[memMol].interfaceList[i].coord = moleculeList[memMol].tmpICoords[i];
            moleculeList[memMol].clear_tmp_association_coords();
            if (currRxn.rxnType != ReactionType::biMolStateChange) {
                moleculeList[memMol].myComIndex = reactCom1.index; // update their complex index
                reactCom1.memberList.push_back(memMol);
            }
            moleculeList[memMol].trajStatus = TrajStatus::propagated;
        }

        // update complexes
        reactCom2.memberList.clear(); // clear the member list so the molecules don't get destroyed
        reactCom2.destroy(moleculeList, emptyMolList, complexList, emptyComList); // destroy the complex
        reactCom1.update_properties(moleculeList, molTemplateList); // recalculate the properties of the first complex

        // Enforce boundary conditions
        reflect_complex_rad_rot(membraneObject, reactCom1, moleculeList, 0.0);
    } // end of if these molecules are closing a loop or not.

    // update Molecule interface statuses
    reactMol1.interfaceList[ifaceIndex1].interaction.partnerIndex = reactMol2.index;
    reactMol2.interfaceList[ifaceIndex2].interaction.partnerIndex = reactMol1.index;
    reactMol1.interfaceList[ifaceIndex1].interaction.partnerIfaceIndex = ifaceIndex2;
    reactMol2.interfaceList[ifaceIndex2].interaction.partnerIfaceIndex = ifaceIndex1;
    if (currRxn.isReversible) {
        reactMol1.interfaceList[ifaceIndex1].interaction.conjBackRxn = currRxn.conjBackRxnIndex;
        reactMol2.interfaceList[ifaceIndex2].interaction.conjBackRxn = currRxn.conjBackRxnIndex;
    }

    reactMol1.interfaceList[ifaceIndex1].isBound = true;
    reactMol1.interfaceList[ifaceIndex1].index = currRxn.productListNew[0].absIfaceIndex;
    reactMol2.interfaceList[ifaceIndex2].isBound = true;
    reactMol2.interfaceList[ifaceIndex2].index = currRxn.productListNew[0].absIfaceIndex;

    // add to the list of bound interfaces and remove from the list of free interfaces
    reactMol1.bndlist.push_back(ifaceIndex1);
    reactMol2.bndlist.push_back(ifaceIndex2);
    reactMol1.bndpartner.push_back(reactMol2.index);
    reactMol2.bndpartner.push_back(reactMol1.index);

    {
        size_t tmpItr { 0 };
        for (unsigned i { 0 }; i < reactMol1.freelist.size(); ++i) {
            if (reactMol1.freelist[i] == ifaceIndex1)
                tmpItr = i;
        }
        reactMol1.freelist[tmpItr] = reactMol1.freelist.back();
        reactMol1.freelist.pop_back();
    }
    {
        size_t tmpItr { 0 };
        for (unsigned i { 0 }; i < reactMol2.freelist.size(); ++i) {
            if (reactMol2.freelist[i] == ifaceIndex2)
                tmpItr = i;
        }
        reactMol2.freelist[tmpItr] = reactMol2.freelist.back();
        reactMol2.freelist.pop_back();
    }
    /*  */

    // Set probability of this protein to zero in all reactions so it doesn't try to
    // react again but the partners still will avoid overlapping.
    for (unsigned crossItr { 0 }; crossItr < reactMol1.crossbase.size(); ++crossItr) {
        int skipMol { reactMol1.crossbase[crossItr] };
        for (unsigned crossItr2 { 0 }; crossItr2 < moleculeList[skipMol].crossbase.size(); ++crossItr2) {
            if (moleculeList[skipMol].crossbase[crossItr2] == reactMol1.index)
                moleculeList[skipMol].probvec[crossItr2] = 0;
        }
    }

    // Set probability of this protein to zero in all reactions so it doesn't try to
    // react again but the partners still will avoid overlapping.
    for (unsigned crossItr { 0 }; crossItr < reactMol2.crossbase.size(); ++crossItr) {
        int skipMol { reactMol2.crossbase[crossItr] };
        for (unsigned crossItr2 { 0 }; crossItr2 < moleculeList[skipMol].crossbase.size(); ++crossItr2) {
            if (moleculeList[skipMol].crossbase[crossItr2] == reactMol2.index)
                moleculeList[skipMol].probvec[crossItr2] = 0;
        }
    }

    // Update the crossed molecule lists so that the current molecules won't avoid anything, but others will.
    reactCom1.ncross = -1;
    reactMol1.crossbase.clear();
    reactMol2.crossbase.clear();

    /*update the number of bound species*/
    update_Nboundpairs(reactMol1.molTypeIndex, reactMol2.molTypeIndex, 1, params, counterArrays);
    /*Update species copy numbers*/
    counterArrays.copyNumSpecies[currRxn.reactantListNew[0].absIfaceIndex]--; // decrement ifaceIndex1
    counterArrays.copyNumSpecies[currRxn.reactantListNew[1].absIfaceIndex]--; // decrement ifaceIndex2
    counterArrays.copyNumSpecies[currRxn.productListNew[0].absIfaceIndex]++; // increment product state

    std::cout << " After ASSOCIATE, CHANGE COPY NUMBERS, interfaces: " << ifaceIndex1 << ' ' << ifaceIndex2
              << " add to product: " << currRxn.productListNew[0].absIfaceIndex
              << " sub from reactants: " << currRxn.reactantListNew[0].absIfaceIndex << " "
              << currRxn.reactantListNew[1].absIfaceIndex << std::endl;
    //     for (int i = 0; i < counterArrays.copyNumSpecies.size(); i++)
    //         std::cout << counterArrays.copyNumSpecies[i] << std::endl;

    // TODO: Insert species tracking here
    if (currRxn.isObserved) {
        auto obsItr = observablesList.find(currRxn.observeLabel);
        if (obsItr != observablesList.end())
            ++obsItr->second;
    }
    //  reactCom1.display();
}
